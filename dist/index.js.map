{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as xlsx from \"xlsx\";\r\nimport * as fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nexport interface Filter {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface ConvertOptions {\r\n  inputFile: string;\r\n  outputDir: string;\r\n  outputFilename?: string;\r\n  filter?: Filter;\r\n}\r\n\r\nexport interface ConvertResult {\r\n  outputPath: string;\r\n}\r\n\r\nexport async function convertXlsxToCsv({\r\n  inputFile,\r\n  outputDir = \"./\",\r\n  outputFilename,\r\n  filter,\r\n}: ConvertOptions): Promise<ConvertResult> {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      // check if the file is an XLSX file\r\n      if (!inputFile.endsWith(\".xlsx\")) {\r\n        throw new Error(\"The input file must be an XLSX file\");\r\n      }\r\n\r\n      // read the XLSX file and get the first worksheet\r\n      const workbook = xlsx.readFile(inputFile);\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n\r\n      // convert the XLSX to JSON\r\n      let json: Record<string, any>[] = xlsx.utils.sheet_to_json(worksheet);\r\n\r\n      // if filter is provided, rename the keys of the JSON objects and remove unwanted rows\r\n      if (filter) {\r\n        // create a new JSON array to store the filtered data\r\n        let filteredJson = [];\r\n\r\n        // iterate over the JSON objects\r\n        for (let obj of json) {\r\n          // create a new object to store the filtered data\r\n          let filteredObj: Record<string, any> = {};\r\n\r\n          // iterate over the keys of the filter object\r\n          for (let key of Object.keys(filter)) {\r\n            // check if the JSON object has the key\r\n            if (obj.hasOwnProperty(key)) {\r\n              // if yes, copy the value to the new object with the new key\r\n              filteredObj[filter[key]] = obj[key];\r\n            }\r\n          }\r\n\r\n          // check if the new object is not empty\r\n          if (Object.keys(filteredObj).length > 0) {\r\n            // if yes, push it to the filtered JSON array\r\n            filteredJson.push(filteredObj);\r\n          }\r\n        }\r\n\r\n        // replace the JSON with the filtered JSON\r\n        json = filteredJson;\r\n      }\r\n\r\n      // convert the JSON to XLSX\r\n      let filteredWorksheet = xlsx.utils.json_to_sheet(json);\r\n\r\n      // convert the XLSX to CSV\r\n      let csv = xlsx.utils.sheet_to_csv(filteredWorksheet);\r\n\r\n      // create a new file\r\n      const outputFile = `${path.join(\r\n        outputDir,\r\n        outputFilename ?? path.basename(inputFile, \".xlsx\"),\r\n      )}.csv`;\r\n\r\n      // write the CSV content to the new file\r\n      fs.writeFileSync(outputFile, csv);\r\n\r\n      // get the output path of the new file\r\n      const outputPath = path.resolve(outputFile);\r\n\r\n      resolve({\r\n        outputPath: outputPath,\r\n      });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AACtB,SAAoB;AACpB,kBAAiB;AAiBjB,SAAsB,iBAAiB,IAKI;AAAA,6CALJ;AAAA,IACrC;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,EACF,GAA2C;AACzC,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI;AAEF,YAAI,CAAC,UAAU,SAAS,OAAO,GAAG;AAChC,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAGA,cAAM,WAAgB,cAAS,SAAS;AACxC,cAAM,YAAY,SAAS,WAAW,CAAC;AACvC,cAAM,YAAY,SAAS,OAAO,SAAS;AAG3C,YAAI,OAAmC,WAAM,cAAc,SAAS;AAGpE,YAAI,QAAQ;AAEV,cAAI,eAAe,CAAC;AAGpB,mBAAS,OAAO,MAAM;AAEpB,gBAAI,cAAmC,CAAC;AAGxC,qBAAS,OAAO,OAAO,KAAK,MAAM,GAAG;AAEnC,kBAAI,IAAI,eAAe,GAAG,GAAG;AAE3B,4BAAY,OAAO,GAAG,CAAC,IAAI,IAAI,GAAG;AAAA,cACpC;AAAA,YACF;AAGA,gBAAI,OAAO,KAAK,WAAW,EAAE,SAAS,GAAG;AAEvC,2BAAa,KAAK,WAAW;AAAA,YAC/B;AAAA,UACF;AAGA,iBAAO;AAAA,QACT;AAGA,YAAI,oBAAyB,WAAM,cAAc,IAAI;AAGrD,YAAI,MAAW,WAAM,aAAa,iBAAiB;AAGnD,cAAM,aAAa,GAAG,YAAAA,QAAK;AAAA,UACzB;AAAA,UACA,0CAAkB,YAAAA,QAAK,SAAS,WAAW,OAAO;AAAA,QACpD,CAAC;AAGD,QAAG,iBAAc,YAAY,GAAG;AAGhC,cAAM,aAAa,YAAAA,QAAK,QAAQ,UAAU;AAE1C,gBAAQ;AAAA,UACN;AAAA,QACF,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAAA;","names":["path"]}